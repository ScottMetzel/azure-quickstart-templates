{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "BaseName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 12,
            "metadata": {
                "description": "The base name for the VMs."
            }
        },
        "BaseSequenceNumber": {
            "type": "int",
            "defaultValue": 1,
            "minValue": 1,
            "maxValue": 999,
            "metadata": {
                "description": "The base sequence number used as part of the VM names."
            }
        },
        "VMSize": {
            "type": "string",
            "defaultValue": "Standard_DS2_v2",
            "metadata": {
                "description": "Size for the VM.  This sample uses premium disk and requires an 'S' sku."
            }
        },
        "VMOSManagedDiskType": {
            "type": "string",
            "defaultValue": "Premium_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Premium_LRS",
                "StandardSSD_LRS",
                "Premium_ZRS",
                "StandardSSD_ZRS"
            ],
            "metadata": {
                "description": "The tier of managed disk to use for the OS disk of the virtual machine."
            }
        },
        "VMDataManagedDiskType": {
            "type": "string",
            "defaultValue": "Premium_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Premium_LRS",
                "StandardSSD_LRS",
                "UltraSSD_LRS",
                "Premium_ZRS",
                "StandardSSD_ZRS"
            ],
            "metadata": {
                "description": "The tier of managed disk to use for the OS disk of the virtual machine."
            }
        },
        "VMCount": {
            "type": "int",
            "defaultValue": 2,
            "minValue": 2,
            "maxValue": 200,
            "metadata": {
                "description": "The number of VMs to create."
            }
        },
        "HybridUseBenefit": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Indicates any virtual machiness created should leverage the Hybrid Use Benefit for Windows."
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "The name of the administrator account of the new VM and domain"
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "The password for the administrator account of the new VM and domain"
            }
        },
        "DeployLoadBalancerDiagnostics": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether to create a diagnostics setting for the Load Balancer. Requires the Resource ID of a Log Analytics Workspace to work."
            }
        },
        "WorkspaceID": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The workspace ID of an existing Log Analytics workspace to use with the Log Analytics agent."
            }
        },
        "WorkspaceKey": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The workspace key for the existing Log Analytics workspace."
            }
        },
        "WorkspaceResourceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The Resource ID of an existing Log Analytics workspace to use with diagnostics on the Load Balancer. Has no effect if 'DeployLoadBalancerDiagnostics' is set to 'false'."
            }
        },
        "VNetResourceID": {
            "type": "string",
            "metadata": {
                "description": "The resource ID for the existing virtual network to use with the frontend load balancer and VMs."
            }
        },
        "LBSubnetName": {
            "type": "string",
            "metadata": {
                "description": "The name of the subnet (not the resource ID) to use with the frontend load balancer."
            }
        },
        "VMSubnetName": {
            "type": "string",
            "metadata": {
                "description": "The name of the subnet (not the resource ID) to use with VMs."
            }
        },
        "VMFirstPrivateStaticIPAddress": {
            "type": "string",
            "defaultValue": "10.0.14.10",
            "metadata": {
                "description": "The private static IP address to use for the first VM. VMs will use a contiguous IP Address range starting with this address."
            }
        },
        "LoadBalancerAccessibility": {
            "type": "string",
            "defaultValue": "Internal",
            "allowedValues": [
                "Public",
                "Internal"
            ],
            "metadata": {
                "description": "Indicates whether the frontend load balancer should be available internally or externally."
            }
        },
        "LoadBalancerFrontendIPIsStatic": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "When the frontend load balancer is available internally, indicates whether the private IP assgiend to it is dynamically or statically assigned."
            }
        },
        "LoadBalancerFrontendPrivateStaticIPAddress": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "When the frontend load balancer is available internally and a private static IP address should be used, indicates the private static IP address to use."
            }
        },
        "TagEnvironment": {
            "type": "string",
            "defaultValue": "Production",
            "allowedValues": [
                "Development",
                "Production",
                "Test"
            ],
            "metadata": {
                "description": "The value for the 'Environment' tag."
            }
        },
        "DeployCSExtension": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether the Custom Script Extension should be deployed."
            }
        }
    },
    "variables": {
        "deploymentEnvironmentInitial": "[toUpper(first(parameters('TagEnvironment')))]",
        "deploymentRegion": "[resourceGroup().location]",
        "firstSequenceNumberString": "[format('{0:00}', parameters('BaseSequenceNumber'))]",
        "pipResourceName": "[concat(variables('deploymentEnvironmentInitial'), '-PIP-', parameters('BaseName'), '-', variables('firstSequenceNumberString'))]",
        "pipDomainNameLabel": "[toLower(concat(parameters('BaseName'), 'PLB', variables('firstSequenceNumberString')))]",
        "pipFQDN": "[toLower(concat(variables('pipDomainNameLabel'), variables('deploymentRegion'), '.cloudapp.azure.com'))]",
        "availabilitySetResourceName": "[concat(variables('deploymentEnvironmentInitial'), '-VMAVS-', parameters('BaseName'), '-', variables('firstSequenceNumberString'))]",
        "vNetLoadBalancerSubnetResourceID": "[concat(parameters('VNetResourceID'),'/subnets/',parameters('LBSubnetName'))]",
        "loadBalancerAcronym": "[toUpper(if(equals(parameters('LoadBalancerAccessibility'),'Internal'),'ILB', 'PLB'))]",
        "loadBalancerResourceName": "[concat(variables('deploymentEnvironmentInitial'), '-', variables('loadBalancerAcronym'), '-', parameters('BaseName'), '-', variables('firstSequenceNumberString'))]",
        "loadBalancerFrontendConfigurationName": "[concat(variables('loadBalancerAcronym'), '-', 'FrontEnd', '-', parameters('BaseName'),'-', variables('firstSequenceNumberString'))]",
        "loadBalancerPIPProperty": {
            "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('pipResourceName'))]"
        },
        "loadBalancerSubnetProperty": {
            "id": "[variables('vNetLoadBalancerSubnetResourceID')]"
        },
        "loadBalancerBackendPoolName": "[concat(variables('loadBalancerAcronym'), '-', 'BackEnd', '-', parameters('BaseName'), '-', variables('firstSequenceNumberString'))]",
        "loadBalancerLoadBalancingRuleName_DNS_TCP": "[concat(parameters('BaseName'), '-DNS-', 'TCP')]",
        "loadBalancerLoadBalancingRuleName_DNS_UDP": "[concat(parameters('BaseName'), '-DNS-', 'UDP')]",
        "loadBalancerHealthProbeName": "[concat(parameters('BaseName'), '-HealthProbe-', variables('firstSequenceNumberString'))]",
        "loadBalancerDiagnosticsName": "[concat(variables('loadBalancerResourceName'),'-Diagnostics-01')]",
        "vmPrivateStaticIPAddressStringArray": "[split(parameters('VMFirstPrivateStaticIPAddress'),'.')]",
        "vNetVMSubnetResourceID": "[concat(parameters('VNetResourceID'),'/subnets/',parameters('VMSubnetName'))]",
        "vMExtensionCustomScriptNameBase": "CustomScript-InstallRoles",
        "vMExtensionApplicationHealthNameBase": "ApplicationHealthWindows",
        "copy": [
            {
                "name": "networkInterfaceNameArray",
                "count": "[parameters('VMCount')]",
                "input": "[concat(parameters('BaseName'),format('{0:00}', copyIndex('networkInterfaceNameArray', parameters('BaseSequenceNumber'))), '-NIC-01')]"
            },
            {
                "name": "vMNameArray",
                "count": "[parameters('VMCount')]",
                "input": "[concat(parameters('BaseName'),format('{0:00}', copyIndex('vMNameArray', parameters('BaseSequenceNumber'))))]"
            },
            {
                "name": "vMOSDiskNameArray",
                "count": "[parameters('VMCount')]",
                "input": "[concat(parameters('BaseName'),format('{0:00}', copyIndex('vMOSDiskNameArray', parameters('BaseSequenceNumber'))), '-DISK-01')]"
            },
            {
                "name": "vMDataDiskNameArray",
                "count": "[parameters('VMCount')]",
                "input": "[concat(parameters('BaseName'),format('{0:00}', copyIndex('vMDataDiskNameArray', parameters('BaseSequenceNumber'))), '-DISK-02')]"
            },
            {
                "name": "vMPrivateStaticIPAddressArray",
                "count": "[parameters('VMCount')]",
                "input": "[concat(variables('vmPrivateStaticIPAddressStringArray')[0], '.', variables('vmPrivateStaticIPAddressStringArray')[1], '.', variables('vmPrivateStaticIPAddressStringArray')[2], '.', range(int(last(variables('vmPrivateStaticIPAddressStringArray'))),parameters('VMCount'))[copyIndex('vMPrivateStaticIPAddressArray')])]"
            }
        ]
    },
    "resources": [
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2020-11-01",
            "name": "[variables('pipResourceName')]",
            "location": "[variables('deploymentRegion')]",
            "condition": "[equals(parameters('LoadBalancerAccessibility'),'Public')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[variables('pipDomainNameLabel')]",
                    "fqdn": "[variables('pipFQDN')]"
                }
            },
            "tags": {
                "Environment": "[parameters('TagEnvironment')]"
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "apiVersion": "2020-11-01",
            "name": "[variables('loadBalancerResourceName')]",
            "location": "[variables('deploymentRegion')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses',variables('pipResourceName'))]"
            ],
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('loadBalancerFrontendConfigurationName')]",
                        "properties": {
                            "privateIPAllocationMethod": "[if(equals(parameters('LoadBalancerAccessibility'),'Internal'),if(parameters('LoadBalancerFrontendIPIsStatic'),'Static','Dynamic'),json('null'))]",
                            "privateIPAddress": "[if(equals(parameters('LoadBalancerAccessibility'),'Internal'),if(parameters('LoadBalancerFrontendIPIsStatic'),parameters('LoadBalancerFrontendPrivateStaticIPAddress'),json('null')),json('null'))]",
                            "publicIPAddress": "[if(equals(parameters('LoadBalancerAccessibility'),'Public'),variables('loadBalancerPIPProperty'),json('null'))]",
                            "privateIPAddressVersion": "[if(equals(parameters('LoadBalancerAccessibility'),'Internal'),'IPv4',json('null'))]",
                            "subnet": "[if(equals(parameters('LoadBalancerAccessibility'),'Internal'),variables('loadBalancerSubnetProperty'),json('null'))]"
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('loadBalancerBackendPoolName')]",
                        "properties": {
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "[variables('loadBalancerLoadBalancingRuleName_DNS_TCP')]",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerResourceName')), '/frontendIPConfigurations/', variables('loadBalancerFrontendConfigurationName'))]"
                            },
                            "frontendPort": 53,
                            "backendPort": 53,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "protocol": "Tcp",
                            "enableTcpReset": false,
                            "loadDistribution": "SourceIP",
                            "disableOutboundSnat": false,
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerResourceName')),'/backendAddressPools/',variables('loadBalancerBackendPoolName'))]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerResourceName')),'/probes/',variables('loadBalancerHealthProbeName'))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('loadBalancerLoadBalancingRuleName_DNS_UDP')]",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerResourceName')), '/frontendIPConfigurations/', variables('loadBalancerFrontendConfigurationName'))]"
                            },
                            "frontendPort": 53,
                            "backendPort": 53,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "protocol": "Udp",
                            "enableTcpReset": false,
                            "loadDistribution": "SourceIP",
                            "disableOutboundSnat": false,
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerResourceName')),'/backendAddressPools/',variables('loadBalancerBackendPoolName'))]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerResourceName')),'/probes/',variables('loadBalancerHealthProbeName'))]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "[variables('loadBalancerHealthProbeName')]",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 53,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    }
                ]
            },
            "tags": {
                "Environment": "[parameters('TagEnvironment')]"
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers/providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "[concat(variables('loadBalancerResourceName'), '/Microsoft.Insights/', variables('loadBalancerDiagnosticsName'))]",
            "location": "[variables('deploymentRegion')]",
            "condition": "[parameters('DeployLoadBalancerDiagnostics')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerResourceName'))]"
            ],
            "properties": {
                "workspaceId": "[if(parameters('DeployLoadBalancerDiagnostics'),parameters('WorkspaceResourceId'),json('null'))]",
                "logs": [
                    {
                        "category": "LoadBalancerAlertEvent",
                        "enabled": true
                    },
                    {
                        "category": "LoadBalancerProbeHealthStatus",
                        "enabled": true
                    }
                ],
                "metrics": [
                    {
                        "category": "AllMetrics",
                        "enabled": true
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "apiVersion": "2020-12-01",
            "location": "[variables('deploymentRegion')]",
            "name": "[variables('availabilitySetResourceName')]",
            "properties": {
                "PlatformUpdateDomainCount": 20,
                "PlatformFaultDomainCount": 2
            },
            "sku": {
                "name": "Aligned"
            },
            "tags": {
                "Environment": "[parameters('TagEnvironment')]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2020-11-01",
            "name": "[variables('networkInterfaceNameArray')[copyIndex('CreateNetworkInterfaces')]]",
            "location": "[variables('deploymentRegion')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerResourceName'))]"
            ],
            "copy": {
                "name": "CreateNetworkInterfaces",
                "count": "[parameters('VMCount')]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "IPConfig01",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[variables('vMPrivateStaticIPAddressArray')[copyIndex('CreateNetworkInterfaces')]]",
                            "subnet": {
                                "id": "[variables('vNetVMSubnetResourceID')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerResourceName'), variables('loadBalancerBackendPoolName'))]"
                                }
                            ]
                        }
                    }
                ]
            },
            "tags": {
                "Environment": "[parameters('TagEnvironment')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2020-12-01",
            "name": "[variables('vMNameArray')[copyIndex('CreateVirtualMachines')]]",
            "location": "[variables('deploymentRegion')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceNameArray')[copyIndex('CreateVirtualMachines')])]",
                "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetResourceName'))]",
                "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerResourceName'))]"
            ],
            "copy": {
                "name": "CreateVirtualMachines",
                "count": "[parameters('VMCount')]"
            },
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetResourceName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('VMSize')]"
                },
                "licenseType": "[if(parameters('HybridUseBenefit'),'Windows_Server',json('null'))]",
                "osProfile": {
                    "computerName": "[variables('vMNameArray')[copyIndex('CreateVirtualMachines')]]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "MicrosoftWindowsServer",
                        "offer": "WindowsServer",
                        "sku": "2019-Datacenter",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[variables('vMOSDiskNameArray')[copyIndex('CreateVirtualMachines')]]",
                        "caching": "ReadOnly",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "[parameters('VMOSManagedDiskType')]"
                        }
                    },
                    "dataDisks": [
                        {
                            "name": "[variables('vMDataDiskNameArray')[copyIndex('CreateVirtualMachines')]]",
                            "caching": "ReadWrite",
                            "createOption": "Empty",
                            "diskSizeGB": 20,
                            "managedDisk": {
                                "storageAccountType": "[parameters('VMDataManagedDiskType')]"
                            },
                            "lun": 0
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceNameArray')[copyIndex('CreateVirtualMachines')])]"
                        }
                    ]
                }
            },
            "tags": {
                "Environment": "[parameters('TagEnvironment')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2020-12-01",
            "name": "[concat(variables('vMNameArray')[copyIndex('AddMMAgents')],'/','MMAExtension')]",
            "location": "[variables('deploymentRegion')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines',variables('vMNameArray')[copyIndex('AddMMAgents')])]"
            ],
            "copy": {
                "name": "AddMMAgents",
                "count": "[parameters('VMCount')]"
            },
            "properties": {
                "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                "type": "MicrosoftMonitoringAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "workspaceId": "[reference(parameters('WorkspaceResourceId'), '2015-03-20').customerId]",
                    "stopOnMultipleConnections": "false"
                },
                "protectedSettings": {
                    "workspaceKey": "[listKeys(parameters('WorkspaceResourceId'), '2015-03-20').primarySharedKey]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2020-12-01",
            "name": "[concat(variables('vMNameArray')[copyIndex('AddCustomScriptExtensions')],'/',variables('vMExtensionCustomScriptNameBase'))]",
            "location": "[variables('deploymentRegion')]",
            "condition": "[parameters('DeployCSExtension')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions',variables('vMNameArray')[copyIndex('AddCustomScriptExtensions')],'MMAExtension')]"
            ],
            "copy": {
                "name": "AddCustomScriptExtensions",
                "count": "[parameters('VMCount')]"
            },
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.10.10",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "commandToExecute": "powershell.exe -ExecutionPolicy Unrestricted -Command {Install-WindowsFeature -Name AD-Domain-Services, DNS -IncludeAllSubFeature -IncludeManagementTools}"
                }
            }
        }
    ],
    "outputs": {
        "DeploymentRegion": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetResourceName'))).location]"
        },
        "VMNames": {
            "type": "array",
            "value": "[variables('vMNameArray')]"
        },
        "NetworkInterfaceNames": {
            "type": "array",
            "value": "[variables('networkInterfaceNameArray')]"
        },
        "VMPrivateStaticIPAddresses": {
            "type": "array",
            "value": "[variables('vMPrivateStaticIPAddressArray')]"
        },
        "VMOSDiskNames": {
            "type": "array",
            "value": "[variables('vMOSDiskNameArray')]"
        },
        "VMDataDiskNames": {
            "type": "array",
            "value": "[variables('vMDataDiskNameArray')]"
        },
        "VNetResourceID": {
            "type": "string",
            "value": "[parameters('VNetResourceID')]"
        },
        "vNetVMSubnetResourceID": {
            "type": "string",
            "value": "[variables('vNetVMSubnetResourceID')]"
        },
        "LoadBalancerName": {
            "type": "string",
            "value": "[variables('loadBalancerResourceName')]"
        },
        "LoadBalancerPrivateIPAddress": {
            "type": "string",
            "condition": "[equals(parameters('LoadBalancerAccessibility'),'Public')]",
            "value": "[reference(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerResourceName')),'Full').frontendIPConfigurations[0].privateIPAddress]"
        },
        "LoadBalancerPublicIPAddress": {
            "type": "string",
            "condition": "[equals(parameters('LoadBalancerAccessibility'),'Public')]",
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('pipResourceName'))).ipAddress]"
        },
        "LoadBalancerSubnetResourceID": {
            "type": "string",
            "condition": "[equals(parameters('LoadBalancerAccessibility'),'Public')]",
            "value": "[variables('vNetLoadBalancerSubnetResourceID')]"
        }
    }
}
